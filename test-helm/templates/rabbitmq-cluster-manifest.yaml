{{- if and .Values.rabbitmq.enabled .Values.rabbitmq.cluster }}
# =================================================================
# RabbitMQ ConfigMap
# =================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: rabbitmq-config
  namespace: {{ .Values.global.namespace | default .Release.Namespace }}
data:
  rabbitmq.conf: |
    listeners.tcp.default = 5672
    management.tcp.port = 15672
    loopback_users.guest = false
    cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc
    cluster_formation.k8s.address_type = hostname
    cluster_formation.k8s.service_name = rabbitmq-headless
    cluster_partition_handling = pause_minority
    default_queue_type = quorum
    vm_memory_high_watermark.relative = 0.5
    disk_free_limit.absolute = 2GB
  enabled_plugins: |
    [rabbitmq_peer_discovery_k8s,rabbitmq_management].
---
# =================================================================
# RabbitMQ Headless Service (for discovery)
# =================================================================
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-headless
  namespace: {{ .Values.global.namespace | default .Release.Namespace }}
  labels:
    app: rabbitmq
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app: rabbitmq
  ports:
  - port: 5672
    name: amqp
  - port: 4369
    name: epmd
  - port: 25672
    name: rabbitmq-dist
---
# =================================================================
# RabbitMQ StatefulSet
# =================================================================
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: {{ .Values.global.namespace | default .Release.Namespace }}
spec:
  serviceName: rabbitmq-headless
  replicas: {{ .Values.rabbitmq.replicaCount }}
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: rabbitmq-container
        image: "{{ .Values.rabbitmq.image.repository }}:{{ .Values.rabbitmq.image.tag }}"
        imagePullPolicy: {{ .Values.global.pullPolicy }}
        ports:
        - name: amqp
          containerPort: 5672
        - name: management
          containerPort: 15672
        env:
        - name: RABBITMQ_NODENAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: RABBITMQ_DEFAULT_USER
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: RABBITMQ_DEFAULT_PASS
        - name: RABBITMQ_DEFAULT_VHOST
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: RABBITMQ_DEFAULT_VHOST
        - name: RABBITMQ_ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: ERLANG_COOKIE
        volumeMounts:
        - name: rabbitmq-data
          mountPath: /var/lib/rabbitmq
        - name: rabbitmq-config
          mountPath: /etc/rabbitmq/rabbitmq.conf
          subPath: rabbitmq.conf
        - name: rabbitmq-config
          mountPath: /etc/rabbitmq/enabled_plugins
          subPath: enabled_plugins
      volumes:
      - name: rabbitmq-config
        configMap:
          name: rabbitmq-config
  volumeClaimTemplates:
  - metadata:
      name: rabbitmq-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.rabbitmq.storage.storageClassName }}
      resources:
        requests:
          storage: {{ .Values.rabbitmq.storage.size }}
{{- end }}