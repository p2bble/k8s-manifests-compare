# =================================================================
# Elasticsearch ClusterIP Service
# Kibana 등 다른 서비스들이 Elasticsearch에 쉽게 접근할 수 있도록 고정된 내부 IP를 제공합니다.
# =================================================================
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-service       # Headless Service의 이름. StatefulSet의 'serviceName'과 일치해야 합니다.
  namespace: croms
spec:
  type: ClusterIP
  selector:
    app: elasticsearch              # 'app: elasticsearch' 라벨이 붙은 Pod를 대상으로 합니다.
  ports:
    - name: http
      port: 9200
      targetPort: 9200

---
# =================================================================
# Elasticsearch ClusterIP Service
# Kibana 등 다른 서비스들이 Elasticsearch에 쉽게 접근할 수 있도록 고정된 내부 IP를 제공합니다.
# =================================================================
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-headless       # Headless Service의 이름. StatefulSet의 'serviceName'과 일치해야 합니다.
  namespace: croms
spec:
  type: ClusterIP
  selector:
    app: elasticsearch              # 'app: elasticsearch' 라벨이 붙은 Pod를 대상으로 합니다.
  ports:
    - name: transport
      port: 9300

---

# =================================================================
# Elasticsearch StatefulSet
# 상태 유지가 중요한 Elasticsearch를 배포하기 위해 사용합니다.
# =================================================================
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  namespace: croms
spec:
  serviceName: "elasticsearch-headless" # 위에서 정의한 Headless Service를 지정
  replicas: 3                           # Pod 복제본 수 (단일 노드 구성)
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      # 노드에 vm.max_map_count가 준비되어 있어야 함 (노드 레벨)
      securityContext:
        fsGroup: 1000                # ⬅️ PV 권한 문제 예방
      # ----------------- Init Container 설정 -----------------
      # 메인 컨테이너가 시작되기 전에 먼저 실행되어 사전 준비 작업을 수행합니다.
      initContainers:
      # Elasticsearch가 사용하는 볼륨에 대한 권한설정 부분.
      - name: fix-permissions
        image: docker.io/library/busybox:1.31.1
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "chown -R 1000:1000 /usr/share/elasticsearch/data"]
        securityContext:
          privileged: true
        volumeMounts:
        - name: data
          mountPath: /usr/share/elasticsearch/data
      # 가상 메모리에 관한 설정. default 값은 '262144' 이다.
      - name: increase-the-vm-max-map-count
        image: docker.io/library/busybox:1.31.1
        imagePullPolicy: IfNotPresent
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true          
      # File Descript 에 관한 설정
      - name: increase-the-ulimit
        image: docker.io/library/busybox:1.31.1
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "ulimit -n 65536"]
        securityContext:
          privileged: true
      # ----------------- Main Container 설정 -----------------
      containers:
      - name: elasticsearch-container
        image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
        imagePullPolicy: IfNotPresent
        ports:
        - name: rest
          containerPort: 9200
          protocol: TCP
        - name: transport
          containerPort: 9300
          protocol: TCP
        # ----------------- 환경 변수 설정 -----------------
        env:
        - name: DISCOVERY_TYPE
          value: "cluster-node"        # 단일 노드로 Elasticsearch 클러스터를 실행
        - name: CLUSTER_NAME
          value: "es-cluster"
        - name: NODE_RULES
          value: "master,ingest"
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NETWORK_HOST
          value: "0.0.0.0"
        - name: discovery.seed_hosts
          valueFrom:
            secretKeyRef:
              name: elasticsearch-secret
              key: ES_DISCOVERY_SEED_HOSTS
        - name: cluster.initial_master_nodes
          valueFrom:
            secretKeyRef:
              name: elasticsearch-secret
              key: ES_INITIONAL_MASTER_NODES
        - name: node.max_local_storage_nodes
          valueFrom:
            secretKeyRef:
              name: elasticsearch-secret
              key: ES_REPLICA_COUNTS
        - name: ELASTIC_USERNAME      # elastic 계정의 비밀번호를 Secret에서 가져옴
          valueFrom:
            secretKeyRef:
              name: elasticsearch-secret
              key: USERNAME
        - name: ELASTIC_PASSWORD      # elastic 계정의 비밀번호를 Secret에서 가져옴
          valueFrom:
            secretKeyRef:
              name: elasticsearch-secret
              key: PASSWORD
        - name: BOOTSTRAP_MEMORY_LOCK # 메모리 스와핑 방지를 위해 메모리 잠금 활성화
          value: "true"
        # X-Pack 보안 기능 활성화 및 SSL 설정
        - name: XPACK_SECURITY_ENABLED
          value: "true"
        - name: "XPACK_SECURITY_AUDIT_ENABLED"
          value: "true"
        - name: XPACK_SECURITY_TRANSPORT_SSL_ENABLED
          value: "true" 
        - name: "XPACK_SECURITY_TTP_SSL_ENABLED"
          value : "false"
        # - name: XPACK_SECURITY_TRANSPORT_SSL_VERIFICATION_MODE
        #   value: "certificate"
        # - name: XPACK_SECURITY_TRANSPORT_SSL_KEYSTORE_PATH
        #   value: "certs/elastic-certificates.p12" # Init Container가 생성한 인증서 경로
        # - name: XPACK_SECURITY_TRANSPORT_SSL_TRUSTSTORE_PATH
        #   value: "certs/elastic-certificates.p12"
        - name: "ES_JAVA_OPTS"        # JVM 힙 사이즈 설정
          value: "-Xms8g -Xmx8g"
        - name: TZ                     # 타임존 설정
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: TIMEZONE
        # ----------------- 볼륨 마운트 설정 -----------------
        volumeMounts:
        - name: data
          mountPath: /usr/share/elasticsearch/data
        - name: tz-seoul
          mountPath: /etc/localtime
      # ----------------- 볼륨 정의 -----------------
      volumes:
      - name: tz-seoul
        hostPath:
          path: /usr/share/zoneinfo/Asia/Seoul
  # =================================================================
  # PersistentVolumeClaim 템플릿
  # StatefulSet의 각 Pod에 대해 고유한 영구 볼륨을 동적으로 생성합니다.
  # =================================================================
  volumeClaimTemplates:
  - metadata:
      name: data                    # PVC의 이름 (예: data-elasticsearch-0)
    spec:
      accessModes: [ "ReadWriteOnce" ]  # ⬅️ RWO에서 RWX로 변경(ReadWriteOnce -> ReadWriteMany)
      storageClassName: "ceph-filesystem"    # ⬅️ local-path에서 nfs-client로 변경
      resources:
        requests:
          storage: 100Gi             # 20GB의 저장 공간 요청
