{{- if .Values.front.enabled }}

# =================================================================
# CROMS Front Service Deployment
# croms-front-service 애플리케이션(웹서버)의 Pod를 배포하고 관리합니다.
# =================================================================
apiVersion: apps/v1                 # 쿠버네티스 API 버전
kind: Deployment                    # 리소스의 종류를 'Deployment'로 지정
metadata:
  name: croms-front-service         # Deployment의 고유한 이름
  labels:
    app: croms-front-service        # Deployment를 식별하기 위한 라벨
spec:
  # .Values.auth.replicaCount 값을 참조하여 Pod 수를 동적으로 설정
  replicas: {{ .Values.front.replicaCount }}
  selector:
    matchLabels:
      app: croms-front-service      # 이 Deployment가 관리할 Pod를 찾는 라벨 셀렉터
  template:                         # Pod를 생성하기 위한 템플릿
    metadata:
      labels:
        app: croms-front-service    # 생성될 Pod에 부여할 라벨. 위 'selector'와 일치해야 합니다.
    spec:
      imagePullSecrets:             # 비공개 컨테이너 레지스트리에서 이미지를 가져올 때 필요한 인증 정보
      - name: croms-registry-cred
      # ----------------- 컨테이너 설정 -----------------
      containers:
      - name: front-service-container # 컨테이너의 이름
        # 글로벌 값과 서비스별 값을 조합하여 이미지 주소를 동적으로 생성
        image: "{{ .Values.global.registry }}/{{ .Values.front.image.name }}:{{ .Values.front.image.tag | default .Values.global.imageTag }}"
        # 글로벌 이미지 Pull 정책 사용
        imagePullPolicy: {{ .Values.global.pullPolicy }}
        ports:
        # 서비스 포트 번호를 동적으로 설정
        - containerPort: {{ .Values.front.port }}

        readinessProbe:
          httpGet:
            path: / # 웹서버 루트 경로에 HTTP GET 요청을 보냅니다.
            port: {{ .Values.front.port }} # 80번 포트로 확인합니다.
            scheme: HTTP
          initialDelaySeconds: 10 # 파드가 시작되고 10초 후 첫 검사를 시작합니다.
          periodSeconds: 5      # 5초마다 검사를 반복합니다.
          timeoutSeconds: 2       # 2초 이내에 응답이 없으면 실패로 간주합니다.
          failureThreshold: 3     # 3번 연속 실패하면 Unready 상태가 됩니다.
        # ----------------- 환경 변수 설정 -----------------
        env:
        - name: TZ                    # 타임존 설정. ConfigMap에서 값을 가져옴
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: TIMEZONE
        - name: SITE_NAME
          value: "rx"
        - name: FCM_TYPE
          value: "socket"
        - name: PROXY_USE
          value: "false"
        # ----------------- 볼륨 마운트 설정 -----------------
        volumeMounts:
        - name: upload-storage        # 아래 volumes에서 정의한 'upload-storage' 볼륨
          mountPath: /opt/frontend/croms-web/img/upload # 컨테이너 내부의 업로드 이미지 경로에 마운트
        - name: apache-config
          mountPath: /usr/local/apache2/conf/extra/httpd-ssl.conf
          subPath: httpd-ssl.conf
      # ----------------- 볼륨 정의 -----------------
      volumes:
      - name: upload-storage          # 파일 업로드를 위한 볼륨
        persistentVolumeClaim:        # PersistentVolumeClaim(PVC)을 사용하여 볼륨을 정의
          claimName: croms-upload-pvc # 'croms-upload-pvc'라는 이름의 PVC를 사용
      - name: apache-config
        configMap:
          name: apache-ssl-extra

---

# =================================================================
# CROMS Front Service
# croms-front-service Pod에 외부 네트워크 연결을 제공합니다.
# =================================================================
apiVersion: v1                  # 쿠버네티스 API 버전
kind: Service                   # 리소스의 종류를 'Service'로 지정
metadata:
  name: croms-front-service     # 서비스의 고유한 이름
spec:
  type: ClusterIP                # 클러스터 외부에서 각 노드의 IP와 특정 포트를 통해 접근할 수 있도록 하는 타입 (테스트용)
  selector:
    app: croms-front-service    # 이 서비스가 트래픽을 전달할 Pod를 선택하는 라벨
  ports:
  - name: http                  # HTTP 포트 설정
    protocol: TCP
    port: 80                    # 서비스가 클러스터 내부에서 노출할 포트
    targetPort: 80              # 트래픽을 전달할 대상 Pod의 컨테이너 포트

{{- end }}
