{{- if .Values.emqx.enabled }}

# =================================================================
# EMQX Headless Service
# StatefulSet의 각 Pod에 고유하고 안정적인 DNS 이름을 제공하기 위해 사용됩니다.
# =================================================================
apiVersion: v1
kind: Service
metadata:
  name: emqx-headless
  labels:
    app: emqx
spec:
  clusterIP: None                 # 'None'으로 설정하여 Headless Service로 만듭니다.
  selector:
    app: emqx                     # 'app: emqx' 라벨을 가진 Pod를 대상으로 합니다.
  ports:
  - name: mqtt
    port: 1883                    # MQTT 기본 포트
    targetPort: 1883
  - name: dashboard
    port: 18083                   # EMQX 대시보드 포트
    targetPort: 18083
  - name: ws
    port: 8083                    # WebSocket 포트
    targetPort: 8083
  - name: wss
    port: 8084                    # Secure WebSocket 포트
    targetPort: 8084
  - name: api
    port: 8081                    # HTTP API 포트
    targetPort: 8081
  - name: clustering
    port: 4370                    # 클러스터링 통신 포트
    targetPort: 4370
  - name: rpc
    port: 5370                    # 내부 RPC 통신 포트
    targetPort: 5370

---

# =================================================================
# EMQX NodePort Service
# 외부에서 EMQX MQTT 브로커 및 대시보드에 접근할 수 있도록 노출합니다.
# =================================================================
apiVersion: v1
kind: Service
metadata:
  name: emqx-service
  labels:
    app: emqx
spec:
  type: NodePort                  # 클러스터 외부에서 노드의 IP와 특정 포트로 접근할 수 있도록 합니다.
  selector:
    app: emqx
  ports:
  - name: mqtt
    port: 1883
    targetPort: 1883
    nodePort: 30883               # 외부에서 MQTT에 접근할 때 사용할 고정 포트
  - name: dashboard
    port: 18083
    targetPort: 18083
    nodePort: 30083               # 외부에서 대시보드에 접근할 때 사용할 고정 포트

---

# =================================================================
# EMQX ACL ConfigMap
# EMQX의 접근 제어 목록(ACL) 설정을 정의합니다.
# =================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: emqx-acl
data:
  acl.conf: |                     # acl.conf 파일의 내용
    {allow, all}.                 # 모든 사용자에게 모든 토픽에 대한 발행/구독을 허용

---

# =================================================================
# EMQX StatefulSet
# 상태 유지가 중요한 EMQX MQTT 브로커를 배포합니다.
# =================================================================
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: emqx
  labels:
    app: emqx
spec:
  serviceName: emqx-headless      # 위에서 정의한 Headless Service와 연결합니다.
  replicas: 1
  selector:
    matchLabels:
      app: emqx
  template:
    metadata:
      labels:
        app: emqx
    spec:
      containers:
      - name: emqx
        image: emqx/emqx:4.3.22
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 1883
          name: mqtt
        - containerPort: 8083
          name: ws
        - containerPort: 8084
          name: wss
        - containerPort: 18083
          name: dashboard
        - containerPort: 8081
          name: api
        - containerPort: 11883
          name: internal
        - containerPort: 4370
          name: clustering
        - containerPort: 5370
          name: rpc
        # ----------------- 환경 변수 설정 -----------------
        env:
        - name: EMQX_NAME
          value: "emqx"
        - name: EMQX_HOST              # Pod의 고유한 이름을 호스트 이름으로 사용
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: EMQX_CLUSTER__DISCOVERY_STRATEGY # 단일 노드 모드로 실행
          value: "singleton"
        - name: EMQX_MQTT__MAX_PACKET_SIZE # 최대 MQTT 패킷 크기
          value: "100MB"
        - name: EMQX_ALLOW_ANONYMOUS   # 익명 접속 비활성화
          value: "false"
        - name: EMQX_LOADED_PLUGINS    # 로드할 플러그인 목록
          value: "emqx_management,emqx_auth_mnesia,emqx_dashboard"
        - name: EMQX_AUTH__MNESIA__PASSWORD_HASH
          value: "plain"
        - name: EMQX_AUTH__CLIENT__1__CLIENTID
          value: "clobot"
        - name: EMQX_AUTH__CLIENT__1__PASSWORD
          value: "ansdufdj1*"
        # 사용자 및 대시보드 인증 정보는 Secret에서 안전하게 가져옴
        - name: EMQX_AUTH__USER__1__USERNAME
          valueFrom:
            secretKeyRef:
              name: emqx-secret
              key: USERNAME
        - name: EMQX_AUTH__USER__1__PASSWORD
          valueFrom:
            secretKeyRef:
              name: emqx-secret
              key: PASSWORD
        - name: EMQX_DASHBOARD__DEFAULT_USER__LOGIN
          valueFrom:
            secretKeyRef:
              name: emqx-secret
              key: DASHBOARD_USERNAME
        - name: EMQX_DASHBOARD__DEFAULT_USER__PASSWORD
          valueFrom:
            secretKeyRef:
              name: emqx-secret
              key: DASHBOARD_PASSWORD
        - name: EMQX_ACL__FILE         # 사용할 ACL 파일 경로 지정
          value: "/opt/emqx/etc/acl.conf"
        - name: TZ
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: TIMEZONE
        # ----------------- 리소스 요청 및 제한 설정 -----------------
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        # ----------------- 헬스 체크 설정 -----------------
        livenessProbe:                # 컨테이너가 살아있는지 검사
          httpGet:
            path: /status
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:               # 컨테이너가 트래픽을 받을 준비가 되었는지 검사
          httpGet:
            path: /status
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
        # ----------------- 볼륨 마운트 설정 -----------------
        volumeMounts:
        - name: acl-config            # 위에서 정의한 ConfigMap을 ACL 설정 파일로 마운트
          mountPath: /opt/emqx/etc/acl.conf
          subPath: acl.conf
        - name: data                  # 데이터 저장을 위한 영구 볼륨 마운트
          mountPath: /opt/emqx/data
      # ----------------- 볼륨 정의 -----------------
      volumes:
      - name: acl-config
        configMap:
          name: emqx-acl            # 'emqx-acl' ConfigMap을 볼륨으로 사용
  # =================================================================
  # PersistentVolumeClaim 템플릿
  # StatefulSet의 각 Pod에 대해 고유한 영구 볼륨을 동적으로 생성합니다.
  # =================================================================
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteMany"]    # ⬅️ RWO에서 RWX로 변경
      storageClassName: "nfs-client"    # ⬅️ local-path에서 nfs-client로 변경
      resources:
        requests:
          storage: 5Gi
          
{{- end }}
